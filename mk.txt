<h3 id="requirejs">requireJs</h3>
<p>虽然目前requireJs已经不再流行，但是它的思想在前端模块化历程中还是值得学习的。
翻看requireJs的源码，个人觉得基本的难点在于：</p>
<ul>
<li>它的基本逻辑比较复杂，模块依赖模块，流程互相嵌套</li>
<li>Module的状态及context的各种变量太多，让人混淆
所以本篇主要围绕着这两点去讲，理清基本的思路（抛开config各种配置）<h4 id="-">入口</h4>
<h5 id="require">require</h5>
默认创建<code>context</code>，调用<code>context.makeRequire()</code>返回<code>require</code>
除了初始化的<code>req({})</code>及<code>req(cgf)</code>；其他js执行过程都是require(deps, callback) —&gt;{script监听事件<code>context.onScriptLoad</code> —&gt; <code>context.completeLoad(data.id);</code> —&gt; 获取模块且初始化} —&gt; 执行nextTick<h5 id="define">define</h5>
基本用法最后只有一步 <code>globalDefQueue.push([name, deps, callback]);</code>,name不定义为<code>null</code> ，
然后执行script监听事件<code>context.onScriptLoad</code></li>
</ul>
